{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZheDfjvkwGuU"
      },
      "source": [
        "# **Quick Stats**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "990b3abf-3b9d-4e1f-e3f8-8f10bba3775d",
        "id": "uJGpyARaxx3K"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "## Quick Stats from Dune API\n",
            "\n",
            "Blur ETH Daily Volume: 945 ETH (▲ 12.15%)\n",
            "OpenSea ETH Daily Volume: 1,207 ETH (▼ 0.85%)\n",
            "BTC: $95,042.78 (▲ 1.76%)\n",
            "ETH: $1,798.02 (▲ 1.75%)\n",
            "Solana: $152.75 (▲ 1.92%)\n",
            "Polygon: $0.25 (▼ 2.67%)\n"
          ]
        }
      ],
      "source": [
        "import requests\n",
        "from google.colab import userdata\n",
        "from datetime import datetime, timedelta\n",
        "from google.colab import auth\n",
        "from requests import Request, Session\n",
        "from requests.exceptions import ConnectionError, Timeout, TooManyRedirects\n",
        "import json\n",
        "import pandas as pd\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "#    ____          _        __      _____  __          __\n",
        "#   / __ \\ __  __ (_)_____ / /__   / ___/ / /_ ____ _ / /_ _____\n",
        "#  / / / // / / // // ___// //_/   \\__ \\ / __// __ `// __// ___/\n",
        "# / /_/ // /_/ // // /__ / ,<     ___/ // /_ / /_/ // /_ (__  )\n",
        "# \\___\\_\\\\__,_//_/ \\___//_/|_|   /____/ \\__/ \\__,_/ \\__//____/\n",
        "\n",
        "\n",
        "# Date Utility Functions\n",
        "def get_date_days_ago(days_ago):\n",
        "    return (datetime.now() - timedelta(days=days_ago)).strftime(\"%Y-%m-%d\")\n",
        "\n",
        "# API Request Function\n",
        "def make_api_request(url, params=None, headers=None):\n",
        "    try:\n",
        "        response = requests.get(url, params=params, headers=headers)\n",
        "        response.raise_for_status()\n",
        "        return response.json()\n",
        "    except requests.exceptions.HTTPError as http_err:\n",
        "        print(f\"HTTP error occurred: {http_err}\")\n",
        "    except Exception as err:\n",
        "        print(f\"An error occurred: {err}\")\n",
        "    return None\n",
        "\n",
        "# Volume Data Processing and Formatting Functions\n",
        "def process_volume_data(dune_response, selected_days, selected_fill_sources):\n",
        "    volume_dict = {}\n",
        "    for row in dune_response.get(\"result\", {}).get(\"rows\", []):\n",
        "        if row[\"day\"] in selected_days and row[\"fill_source\"] in selected_fill_sources:\n",
        "            volume_dict[(row[\"day\"], row[\"fill_source\"])] = row.get(\"volume\", 0)\n",
        "    return volume_dict\n",
        "\n",
        "def calculate_percentage_change(volume_dict, date1, date2, source):\n",
        "    volume_day1 = volume_dict.get((date1, source), 0)\n",
        "    volume_day2 = volume_dict.get((date2, source), 0)\n",
        "    if volume_day1 > 0:\n",
        "        return (volume_day2 - volume_day1) / volume_day1 * 100\n",
        "    return 0\n",
        "\n",
        "def format_diff24h(diff24h):\n",
        "    if diff24h > 0:\n",
        "        return \"(▲ {:.2f}%)\".format(diff24h)\n",
        "    elif diff24h < 0:\n",
        "        return \"(▼ {:.2f}%)\".format(abs(diff24h))\n",
        "    else:\n",
        "        return \"(► 0.00%)\"\n",
        "\n",
        "def format_volume(volume):\n",
        "    return \"{:,} ETH\".format(int(round(volume)))\n",
        "\n",
        "# CoinMarketCap Data Processing\n",
        "def parse_cmc_data(data):\n",
        "    parsed_data = {}\n",
        "    for coin, info in data[\"data\"].items():\n",
        "        symbol = info[\"symbol\"]\n",
        "        price_usd = info[\"quote\"][\"USD\"][\"price\"]\n",
        "        percent_change_24h = info[\"quote\"][\"USD\"][\"percent_change_24h\"]\n",
        "        parsed_data[symbol] = {\"price_usd\": price_usd, \"diff24h\": percent_change_24h}\n",
        "    return parsed_data\n",
        "\n",
        "def fetch_and_process_cmc_data():\n",
        "    url_cmc = 'https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest'\n",
        "    parameters_cmc = {'symbol': 'BTC,ETH,SOL,POL', 'convert': 'USD'}\n",
        "    headers_cmc = {'Accepts': 'application/json', 'X-CMC_PRO_API_KEY': '91d2e75e-d96b-45d2-93ce-3acac329d6ff'}\n",
        "\n",
        "    data_cmc = make_api_request(url_cmc, params=parameters_cmc, headers=headers_cmc)\n",
        "    if data_cmc:\n",
        "        return pd.DataFrame(parse_cmc_data(data_cmc)).transpose()\n",
        "    return pd.DataFrame()\n",
        "\n",
        "# Main Execution\n",
        "if __name__ == \"__main__\":\n",
        "    yesterday = get_date_days_ago(1)\n",
        "    day_before_yesterday = get_date_days_ago(2)\n",
        "\n",
        "    # Dune API Request\n",
        "    dune_api_key = \"aA4OPz9enXXfhdOqGZVSyAluN7HbyhFA\"\n",
        "    dune_url = f\"https://api.dune.com/api/v1/query/2719160/results?api_key={dune_api_key}\"\n",
        "    dune_response = make_api_request(dune_url)\n",
        "\n",
        "    if dune_response:\n",
        "        selected_days = [day_before_yesterday, yesterday]\n",
        "        selected_fill_sources = [\"opensea.io\", \"blur.io\"]\n",
        "        volume_data = process_volume_data(dune_response, selected_days, selected_fill_sources)\n",
        "\n",
        "        # Calculate percentage changes and format volumes\n",
        "        percentage_change_opensea = calculate_percentage_change(volume_data, day_before_yesterday, yesterday, \"opensea.io\")\n",
        "        percentage_change_blur = calculate_percentage_change(volume_data, day_before_yesterday, yesterday, \"blur.io\")\n",
        "        formatted_volume_opensea = format_volume(volume_data.get((yesterday, \"opensea.io\"), 0))\n",
        "        formatted_volume_blur = format_volume(volume_data.get((yesterday, \"blur.io\"), 0))\n",
        "        formatted_percentage_opensea = format_diff24h(percentage_change_opensea)\n",
        "        formatted_percentage_blur = format_diff24h(percentage_change_blur)\n",
        "\n",
        "        # Display Quick Stats from Dune API\n",
        "        print(\"## Quick Stats from Dune API\\n\")\n",
        "        print(\"Blur ETH Daily Volume:\", formatted_volume_blur, formatted_percentage_blur)\n",
        "        print(\"OpenSea ETH Daily Volume:\", formatted_volume_opensea, formatted_percentage_opensea)\n",
        "\n",
        "    # CoinMarketCap API Request and Processing\n",
        "    df_cmc = fetch_and_process_cmc_data()\n",
        "\n",
        "    # Adjustments and renaming for clarity\n",
        "    if not df_cmc.empty:\n",
        "        df_cmc = df_cmc.rename(index={'POL': 'Polygon'})\n",
        "        df_cmc = df_cmc.rename(index={'SOL': 'Solana'})\n",
        "        # Reorder DataFrame if necessary\n",
        "        df_cmc = df_cmc.loc[['BTC', 'ETH', 'Solana', 'Polygon']]\n",
        "        for i, (index, row) in enumerate(df_cmc.iterrows(), start=1):\n",
        "            formatted_output = \"{}: {} {}\".format(index, \"${:,.2f}\".format(row['price_usd']), format_diff24h(row['diff24h']))\n",
        "            print(formatted_output)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bapH2QpUwPVB"
      },
      "source": [
        "# **Top NFT Sales**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "00eXuuyMYSE1",
        "outputId": "4330a101-c268-49fa-adf2-71959b5ed985"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "## Top NFT Sales from the Desired Time Range\n",
            "Skulls of Luci #20: 90.00 ETH\n",
            "Skulls of Luci #12: 85.00 ETH\n",
            "CryptoPunks #8673: 57.50 ETH\n"
          ]
        }
      ],
      "source": [
        "\n",
        "import requests\n",
        "import json\n",
        "\n",
        "try:\n",
        "    response = requests.get('https://api-bff.nftpricefloor.com/projects/top-sales/24h')\n",
        "    response.raise_for_status()  # Raise an exception for HTTP errors\n",
        "\n",
        "    try:\n",
        "        projects = response.json()\n",
        "    except json.JSONDecodeError:\n",
        "        print(\"Error: The response from the API is not valid JSON.\")\n",
        "        projects = []\n",
        "\n",
        "    # Sort the projects by ethPrice in descending order\n",
        "    sorted_projects = sorted(projects, key=lambda x: x.get(\"ethPrice\", 0), reverse=True)\n",
        "\n",
        "    print(\"## Top NFT Sales from the Desired Time Range\")\n",
        "    for i, project in enumerate(sorted_projects[:3]):\n",
        "        name = project[\"project\"][\"name\"]\n",
        "        tokenId = project[\"tokenId\"]\n",
        "        nativeCurrency = project[\"nativeCurrency\"]\n",
        "        nativePrice = project[\"nativePrice\"]\n",
        "\n",
        "        print(f\"{name} #{tokenId}: {nativePrice:.2f} {nativeCurrency.upper()}\")\n",
        "\n",
        "except requests.exceptions.RequestException as e:\n",
        "    print(f\"Error: Failed to make a request to the API - {e}\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UuHT2THHwU2A"
      },
      "source": [
        "# **NFT Daily Winners/Losers (ALL COLLECTIONS)**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EHgTtDc8oCHQ",
        "outputId": "9b3d815a-4af4-4b0f-cb24-f78df1861ebf"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "## NFT Daily Winners\n",
            "\n",
            "👾 Tensorians: 2.76 SOL (▲ 17.55%)\n",
            "🐧 Pudgy Penguins: 10.55 ETH (▲ 7.32%)\n",
            "🍭 Mocaverse: 1.97 ETH (▲ 3.58%)\n",
            "👩🏻 Milady Maker: 3.27 ETH (▲ 3.52%)\n",
            "🐱 Quantum Cats: 0.04 BTC (▲ 0.50%)\n",
            "🚬 CryptoPunks: 43.10 ETH (► 0.00%)\n",
            "🦧 Bored Ape Yacht Club: 13.60 ETH (► 0.00%)\n",
            "🏳‍🌈 Chromie Squiggles: 4.33 ETH (► 0.00%)\n",
            "\n",
            "## NFT Daily Losers\n",
            "\n",
            "⛩ Azuki: 2.62 ETH (▼ 0.41%)\n",
            "🧦 Bitcoin Puppets: 0.04 BTC (▼ 0.56%)\n",
            "💼 Ordinal Maxi Biz: 0.02 BTC (▼ 1.46%)\n",
            "😡 Mad Lads: 43.90 SOL (▼ 2.43%)\n",
            "🐵 NodeMonkes: 0.04 BTC (▼ 2.54%)\n",
            "🧙‍♂️ Taproot Wizards: 0.16 BTC (▼ 3.14%)\n",
            "🏴‍☠ Captainz: 0.63 ETH (▼ 5.37%)\n"
          ]
        }
      ],
      "source": [
        "import requests\n",
        "\n",
        "# Function to format the percentage change\n",
        "def format_diff24h(diff24h):\n",
        "    if diff24h > 0:\n",
        "        return \"(▲ {:.2f}%)\".format(diff24h)\n",
        "    elif diff24h < 0:\n",
        "        return \"(▼ {:.2f}%)\".format(abs(diff24h))\n",
        "    else:\n",
        "        return \"(► 0.00%)\"\n",
        "\n",
        "# Dictionary mapping slugs to their corresponding names\n",
        "slug_to_name = {\n",
        "    'quantum-cats': '🐱 Quantum Cats',\n",
        "    'bitcoin-puppets': '🧦 Bitcoin Puppets',\n",
        "    'nodemonkes': '🐵 NodeMonkes',\n",
        "    'omb': '💼 Ordinal Maxi Biz',\n",
        "    'tensorians': '👾 Tensorians',\n",
        "    'mad-lads': '😡 Mad Lads',\n",
        "    'milady': '👩🏻 Milady Maker',\n",
        "    'azuki': '⛩ Azuki',\n",
        "    'chromie-squiggle-art-blocks-curated': '🏳‍🌈 Chromie Squiggles',\n",
        "    'pudgy-penguins': '🐧 Pudgy Penguins',\n",
        "    'cryptopunks': '🚬 CryptoPunks',\n",
        "    'bored-ape-yacht-club': '🦧 Bored Ape Yacht Club',\n",
        "    'thecaptainz': '🏴‍☠ Captainz',\n",
        "    'mocaverse': '🍭 Mocaverse',\n",
        "    'taproot-wizards': '🧙‍♂️ Taproot Wizards'\n",
        "}\n",
        "\n",
        "# List of project slugs to pull statistics from\n",
        "project_slugs = [\n",
        "    \"quantum-cats\",\n",
        "    \"bitcoin-puppets\",\n",
        "    \"nodemonkes\",\n",
        "    \"omb\",\n",
        "    \"tensorians\",\n",
        "    \"mad-lads\",\n",
        "    \"milady\",\n",
        "    \"cryptopunks\",\n",
        "    \"bored-ape-yacht-club\",\n",
        "    \"chromie-squiggle-art-blocks-curated\",\n",
        "    \"thecaptainz\",\n",
        "    \"azuki\",\n",
        "    \"pudgy-penguins\",\n",
        "    \"mocaverse\",\n",
        "    \"taproot-wizards\"\n",
        "]\n",
        "\n",
        "def fetch_project_stats(slug):\n",
        "    # Fetch data from NFT Price Floor for the given slug\n",
        "    url = f\"https://api-bff.nftpricefloor.com/projects/{slug}/stats\"\n",
        "    response = requests.get(url)\n",
        "    if response.status_code == 200:\n",
        "        data = response.json()\n",
        "        floor_temporality_native = data.get('floorTemporalityNative', {})  # Access floorTemporalityNative dictionary\n",
        "        diff24h = floor_temporality_native.get('diff24h', 0)  # Access diff24h from floorTemporalityNative\n",
        "        stats = {\n",
        "            'name_nft_stats': slug_to_name.get(slug, ''),  # Get the name corresponding to the slughttps://finance.yahoo.com/news/donald-trumps-world-liberty-financial-003018115.html\n",
        "            'price_nft_stats': data.get('floorInfo', {}).get('currentFloorNative', 0),\n",
        "            'diff24h_nft_stats': diff24h,  # Assign diff24h directly\n",
        "            'currency': data.get('floorInfo', {}).get('nativeCurrency', 'ETH')\n",
        "        }\n",
        "        return stats\n",
        "    else:\n",
        "        print(f\"Failed to fetch data for slug {slug}\")\n",
        "        return None\n",
        "\n",
        "# Fetch and process data for all slugs\n",
        "all_projects = []\n",
        "for slug in project_slugs:\n",
        "    project_stats = fetch_project_stats(slug)\n",
        "    if project_stats:\n",
        "        all_projects.append(project_stats)\n",
        "\n",
        "# Sort all data\n",
        "all_projects_sorted = sorted(all_projects, key=lambda x: x['diff24h_nft_stats'], reverse=True)\n",
        "\n",
        "# Define winners and losers\n",
        "winners = [project for project in all_projects_sorted if project['diff24h_nft_stats'] >= 0]\n",
        "losers = [project for project in all_projects_sorted if project['diff24h_nft_stats'] < 0]\n",
        "\n",
        "# Print NFT Daily Winners\n",
        "print(\"\\n## NFT Daily Winners\\n\")\n",
        "for project in winners:\n",
        "    name = project['name_nft_stats']\n",
        "    price = \"{:.2f} {}\".format(float(project['price_nft_stats']), project['currency'].upper())\n",
        "    diff = format_diff24h(project['diff24h_nft_stats'])\n",
        "    print(f\"{name}: {price} {diff}\")\n",
        "\n",
        "# Print NFT Daily Losers\n",
        "print(\"\\n## NFT Daily Losers\\n\")\n",
        "for project in losers:\n",
        "    name = project['name_nft_stats']\n",
        "    price = \"{:.2f} {}\".format(project['price_nft_stats'], project['currency'].upper())\n",
        "    diff = format_diff24h(project['diff24h_nft_stats'])\n",
        "    print(f\"{name}: {price} {diff}\")\n"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "cell_execution_strategy": "setup",
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}